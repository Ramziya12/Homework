A
=====
Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), 
вычисляющую расстояние между точкой (x1,y1) и (x2,y2).
Считайте четыре действительных числа и выведите результат работы этой функции.
=====

from math import sqrt 
def distance(x1, y1, x2, y2):
    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) 
    
x1 = float(input())
x2 = float(input())
y1 = float(input())
y2 = float(input())
print(distance(x1, x2, y1, y2))

C
=====
Даны два действительных числа x и y. Проверьте, принадлежит ли точка с координатами (x,y)
заштрихованному квадрату (включая его границу).
Если точка принадлежит квадрату, выведите слово YES, иначе выведите слово NO.
На рисунке сетка проведена с шагом 1.
=====

def IsPointInSquare(x, y):
    return (abs(x) <= 1) and (abs(y) <= 1)
    
x = float(input())
y = float(input())
if (IsPointInSquare(x, y)):
    print('YES')
else:
    print('NO')
    
E
=====
Даны пять действительных чисел: x, y, xc, yc, r.
Проверьте, принадлежит ли точка (x,y) кругу с центром (xc,yc) и радиусом r.
Если точка принадлежит кругу, выведите слово YES, иначе выведите слово NO.

Решение должно содержать функцию IsPointInCircle(x, y, xc, yc, r),
возвращающую True, если точка принадлежит кругу и False, если не принадлежит.
Основная программа должна считать координаты точки, вызвать функцию IsPointInCircle и
в зависимости от возвращенного значения вывести на экран необходимое сообщение.

Функция IsPointInCircle не должна содержать инструкцию if.
=====

def IsPointInCircle(x, y, xc, yc, r):
    return ((x-xc)**2+(y-yc)**2) ** 0.5 <= r

x = float(input())
y = float(input())
xc = float(input())
yc = float(input())
r = float(input())
if IsPointInCircle(x, y, xc, yc, r):
    print('YES')
else:
    print('NO')

G
=====
Дано действительное положительное число a и целоe число n.

Вычислите an. Решение оформите в виде функции power(a, n).

Стандартной функцией или операцией возведения в степень пользоваться нельзя.
=====

def power(a, n):
    res = 1
    for i in range(abs(n)):
        res *= a
    if n >= 0:
        return res
    else:
        return 1 / res
 
print(power(float(input()), int(input())))

I
=====
Дано натуральное число n>1. Выведите его наименьший делитель, отличный от 1.

Решение оформите в виде функции MinDivisor(n).
Алгоритм должен иметь сложность O(n−−√).

Указание. Если у числа n нет делителя не превосходящего n−−√,
то число n — простое и ответом будет само число n.
=====

n = int(input())

def MinDivisor(n):
    i = 2
    while n % i != 0:
        if i >= n ** 0.5:
            print(n)
            return
        i += 1
    print(i)
    
MinDivisor(n)

J
=====
Дано натуральное число x>1. Проверьте, является ли оно простым. 
Программа должна вывести слово YES, если число простое и NO, если число составное.

Решение оформите в виде функции IsPrime(x), которая возвращает True для простых чисел и False для составных чисел.
Решение должно иметь сложность O(x−−√).
=====

def isPrime(n):
    d = 2
    while d * d <= n and n % d != 0:
        d += 1
    return d * d > n

n = int(input())
if isPrime(n):
    print('YES')
else:
    print('NO')

K
=====
Дано действительное положительное число a и целое неотрицательное число n.
Вычислите an не используя циклы и стандартную функцию pow, а используя рекуррентное соотношение an=a⋅an−1.

Решение оформите в виде функции power(a, n).
=====

a = float(input())
n = int(input())
def power(a, n):
    if n == 0:
        return 1
    else:
        return a * power(a, n - 1)

print(power(a, n))

L
=====
Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел.
Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы.
=====

def sum(a, b):
    if b == 0:
        return a
    else:
        if b > 0:
            return sum(a + 1, b - 1)
        else:
            return sum(a - 1, b + 1)

print(sum(int(input()), int(input())))
    
